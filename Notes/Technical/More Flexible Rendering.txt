More Flexible Rendering (3/31/18)
---------------------------------
Goals:
1. Remove hacky code for rendering BattleEntities with the Charge shader
2. More easily allow rendering with new shaders and effects
3. Separate rendering logic so other projects can render the battle system however they want

One of the main issues with the current implementation is that we start only one UI and Sprite batch and add everything to it. While this is great for performance, it's not ideal since we will need different render settings applied in certain situations, and thus needing to start more batches.

Starting and ending batches inside the objects themselves is messy and not ideal. Objects should not have to choose how they render; rather, they should simply have settings and leave something external to choose how to render them based on those settings. This battle system isn't focused on rendering, so these should be as unobtrusive as possible. Right now, the only shader we actually use is the Charge shader, so we can check if the object has a Charge and render it with that shader for now. As long as all of this is separate, it'll be easily extensible later if need be.

At the same time, I neither want to break a lot of the existing code nor entirely overhaul how objects render. I think a good compromise is something along the lines of this:

-Break down the higher level objects that render in the main engine code; instead of calling BattleManager.Instance.Draw(), create a new method that renders only the BattleEntities and puts them in batches according to which shader they use. This lets us continue calling the objects' own Draw() methods but in a better way. Continue from there by rendering UI elements, Status Icons, and whatever else in separate methods
  -Each new method broken down can start new batches. With this, we gain more flexibility and a potential performance gain if anything before were to exceed the SpriteBatch limit, which would start a new batch anyway
  
Implementation
--------------

Main:
-Add a RenderBattleEntities() method
  -Organize BattleEntities into two lists: charge shader, and not charge shader
  -Start batches for the appropriate shaders and settings
 -Render the current action of the BattleEntity whose turn it is
-Add a RenderStatusInfo() method
  -Start a new UI batch with default values, and call DrawStatusInfo() on each BattleEntity's StatusEffect list
-Add similar methods for rendering UI elements contained in the BattleUIManager and BattleObjects contained in the BattleObjManager
-For all new methods, make sure that whenever a batch is started, it's also ended

Main.PreDraw():
-Call SpriteRenderer.SetUpDrawing() to set the RenderTarget on the graphics device so everything rendered is on the target
-Start a new UI batch then call Debug.DebugDraw()

Main.MainDraw():
-Draw the battle scene using the newly defined methods

Main.PostDraw():
-Call SpriteRenderer.Instance.ConcludeDrawing() to perform post-processing effects, render to the backbuffer, and clear the RenderTarget on the graphics device

This is a pretty rough outline, but I think it would get us what we need without drastically altering the code. Test it out and see how it goes.