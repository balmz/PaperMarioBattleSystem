Refactoring for New Battle Entities (11/4/17)
---------------------------------------------
The main issue with the current BattleManager is it's quite a task to add a new type of Battle Entity.

In the PM series, there are various types of Battle Entities, which are listed in the "Types of Battle Entities in the PM Games" document, so let's just list the main types:
-Players
-Main Enemies
-Helper Enemies
-Audience
-Neutral

Right now we have support for Players and Enemies, but even then it's not refined enough: there's no easy access to all the Battle Entities in battle, and most
methods check only for players or enemies (and perform casts which will cause exceptions for other types). The goal is to allow the BattleManager to support more types
of Battle Entities while still being as easy to use as, or even easier than, it currently is.

Step 1
------
First, provide access to all types of Battle Entities in battle and provide a means to filter them.

Solution 1
----------
-We can have:

Dictionary<EntityTypes, List<BattleEntity>>

The Dictionary allows us to keep separate lists for each type of BattleEntity while simultaneously having access to every one of them. This provides easy access and a means of filtering. A List<BattleEntity> is used as the value because it can be freely resized, which is what we want, since Battle Entities can call allies into battle.

For Mario and his Partner: we can still keep their helper properties to reference them, so they will just need to be added to this Dictionary.

We can also add helper properties for any other Battle Entities if appropriate; just make sure they're in this Dictionary as well.

Step 2
------
Refactor how enemies and their battle indices are stored and handled. They still use the old array system with 5 slots but with a List instead. We can still limit the max number of enemies in battle, but this will allow for any number of enemies in battle. These changes will help lead the way for adding more entity types.

Solution 2
----------
-No longer have null entries in the Enemies list. This will break methods involving finding enemy indices, so we'll need to fix them.


Once these two steps are in place, we'll see how to move forward with the rest.

Update (11/6/17)
----------------
Every type of BattleEntity, not just enemies, can benefit from having a BattleIndex, so it makes sense to give every type one even if not all use it for the same purpose.

Right now, enemy battle indices go from left to right, but the "first" player is considered the one in the front, which is on the right.

Let's set a few things in place:

-The BattleIndex should, in general, represent where to expect the BattleEntity in relation to all the others of its type from the left side of the stage.
  -Exceptions include Bomb Squad bombs, which can be anywhere. However, the lower indices will detonate first.
  -Another exception includes players: the players further to the right go first despite having a lower BattleIndex
-As a result, BattleEntities on the left will have lower BattleIndices. If two BattleEntities are on the same X position (Ex. Mini-Yux), the one with a higher Y position should
have a lower Battleindex.
-In most cases, a BattleIndex will also correspond to the index in the list referencing that BattleEntity (Ex. Enemies[1] will have a BattleIndex of 1).
  -Here's a case where this is not true: take 2 enemies, with indices 0 and 1. If the enemy with index 0 is killed, only 1 will be left. So Enemies[0] will have a BattleIndex of 1.
-When BattleEntities are added to a BattleEntity list, sort by BattleIndex.
-The types of BattleEntities should determine for themselves where their BattlePositions are based on the BattleIndex. This keeps that code out of the BattleManager, makes it easier to modify, and makes it easier to add new types of BattleEntities.



Update (11/8/17)
----------------
A BattleIndex for each type of BattleEntity has been implemented, the old enemy array system has been removed, and the appropriate methods have been updated.

Step 3
------
The next step is to make the turn order more flexible. This will allow other types of BattleEntities to take turns in battle.

This will also allow for more battle customization.

Solution 3
----------
Instead of the BattlePhase enum, it would be easier to use the EntityTypes enum. Have the following:

-private readonly EntityTypes[] TurnOrder
-Change the Phase field's type from a BattlePhase to an EntityTypes

The turn order can be set in stone or defined somewhere. For now we can hardcode it, but the array structure will make it flexible to change.

When determining who should go and when switching phases, we have the following logic:

1. Look through the list of BattleEntities associated with the current phase, and find out who should go
2. If no turns are available for those entities, move up one value in the TurnOrder array, calling OnPhaseEnd() for those entities right before
3. If we're out of range, then we have completed a phase cycle and should wrap around to the start. Call OnPhaseCycleStart() for every entity in battle
4. Call OnPhaseStart() for all the entities associated with the current phase. Repeat steps 1-4

Try this flow and we'll see how it works. An additional plus of this is that you can prevent certain types of entities from taking turns in battle if you wish.

It may also be desirable to specify the phase the phase cycle ends after, so you can adjust the turn order but make it end whenever you want.

