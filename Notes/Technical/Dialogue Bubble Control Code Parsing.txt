Dialogue Bubble Control Code Parsing (4/18/18)
----------------------------------------------
Dialogue Bubbles have a set of control codes which dictate several things, including how certain text in the bubbles behave. This document deals with handling these control codes to replicate the behavior from TTYD. Since PM's control codes aren't well-documented, seem to share a lot of similarities with TTYD, and can be implemented within TTYD's system, I'm not concerned with looking further into them.

See the "Dialogue_Data (TTYD).txt" file in the "Data Documents" folder for all the control codes and what they do.

The basic idea is this. The control codes are very similar to HTML tags, so we can convert their inputs to HTML attributes and use an HTML parser to handle getting all the data. I've looked into several options, and this is what I came up with:

Use the HtmlAgilityPack library. It's lightweight, doesn't require a strict HTML syntax, and has managed to parse everything I put into it so far.

Adjust the control codes to have proper HTML attributes
=======================================================
-Use a name called "value" for most attributes
-Ex. "<col 77aadd88>Test stuff</col>" becomes "<col value="77aadd88">Test stuff</col>"
-Change the "col" tag to "color". HtmlAgilityPack has trouble obtaining the inner text of "col" elements, possibly because it's expecting a table. The new name is also clearer.
-We can get the stream position in an HtmlNode with StreamPosition

Additional things:
-Nodes with raw text have "#text" as their node name
-Comment tags have "#comment" as their node name
-The root document node has "#document" as its node name

There's no way to combine message modifiers, such as <boss>, so the last one encountered should be the one used for the bubble. See the "Dialogue Bubble Control Code Notes" document for more information.

Parsing Implementation
----------------------
We can have strings defining the various text modifiers we're looking for:

public const string ColorMod = "color";
public const string DynamicMod = "dynamic";
public const string ShakeMod = "shake";
public const string WaveMod = "wave";

Then we add a class/struct that contains all information about text in a range and which effects are applied:

public class BubbleTextData
{
    int StartIndex;
    int EndIndex;
    Color color = Color.Black;
    float DynamicSize = 1f;
    bool Shake = false;
    bool Wave = false;
}

The StartIndex and EndIndex are the start and end indices, respectively, in the StringBuilder to render characters in this range with the effects. I wrote a SpriteBatch extension method called DrawStringChars() that allows us to render individual characters.

An HtmlDocument InnerText property gets us the entire string without any of the tags applied.

When parsing, do the following:

1. Create a new HtmlDocument and load the string in as HTML with HtmlDocument.LoadHtml()
2. Get a list of all child nodes with HtmlDocument.DocumentNode.ChildNodes.ToList()
3. Go through all nodes in the list. The Name tells us if it's a tag or not. Add each Node encountered to a new list
4. When encountering a node with "#text" as its name, check its StreamPosition in relation to the nodes in the current list
   4a. If it's between the Node's StreamPosition and the Node's EndNode StreamPosition, apply the effects to it
   4b. If it's after the EndNode's StreamPosition, remove that Node from the list
   4c. Get the index of the text Node's contents in the InnerText of the root HtmlDocument with IndexOf(). This is the StartIndex. The EndIndex will be StartIndex + the length of the text string.
5. Ignore all nodes with "#document" and "#comment" as their names

When rendering wavy text, each character should be offset by a global value.
When rendering shaky text, each character should be offset by a random value within a global range.

When viewing previous text, turn the color grey and remove all effects, such as shake and wave.

Some details may be missing from this implementation, but this is the high-level overview. This document will be updated as the implementation comes along.

Update (4/19/18)
----------------
<color>, <shake>, <wave>, and <scale> have been implemented and work very well! The way parsing works now broke rendering other text when progressing the Dialogue Bubble to the next set of text. Since we need the <p> control code for that anyway, let's get into the message modifiers.

To recap, here's what we have:

-A StringBuilder that adds each character to it as it goes.
-A List<BubbleTextData> that tells which parts of the text should be rendered with which effects. No matter the size of the string, if we put it into the parser, it will generate the data we need to have the text modifiers work.
-The indices of all the text modifiers applies to the control code-less version of the string. For example, the shake effect in "Hello <shake>World!</shake>" applies from index 6 through 11.

With this we can achieve a wide variety of text effects, some of which we currently have. The next step is to handle message modifiers, which affect the bubble's behavior.

The modifiers we should tackle first are the following:

<k> or <key> - Waits for a button press before progressing. This is only inserted at the end of bubble sections in TTYD, but it can actually be placed anywhere.
<p> - Begins a new paragraph, which moves the current text up and starts printing the next set of text after the <p>.

One way to go about this is implement Message Routines. While a Message Routine is going on, the dialogue bubble halts printing text until the routine is finished.

For <k> or <key>, we would have a routine that checks for input before continuing.
For <p>, we would have a routine that scrolls the text up.

I'll write up more about how to define and implement these when I've thought about it more thoroughly.

Update (4/20/18)
----------------
We can handle <p> with an int field called ParagraphIndex. Here's how it'd work:
                                           --------------
-Each BubbleTextData has a ParagraphIndex field
-While parsing, when a <p> is encountered, we increment a counter tracking the current ParagraphIndex
-When setting text modifiers, the ParagraphIndex is set to the current counter

We can render the text at ((position - TextYOffset) + (ParagraphIndex * YMoveAmount)). This allows us to scroll and offset paragraphs.

We also need to keep track of the max ParagraphIndex to determine when a Dialogue Bubble should end. We can use the following structure to hold information about the Dialogue Bubble itself:

public class BubbleData
{
    int MaxParagraphIndex;
    List<BubbleTextData> TextData;
}

This allows us to expand this class with other data, such as dialogue bubble styles for <kanban> and similar modifiers, and much more.

To finish up the rendering offset, we need to track how many new lines we've encountered up until the current paragraph so we can offset it by that many. This will ensure that, regardless if there are 1 or 4 lines in the current bubble, the next one will start its text at the same location.

-Add a new field in BubbleTextData called NewLineCount.

We can do this by counting the new lines in each text we encounter and storing the total number of new lines. When finding text, count the number of new lines in it, then set the current BubbleTextData's NewLineCount to the total. Upon finding a paragraph tag, add the current new line count to the total.

Message Routines
----------------
Let's focus on the following control codes, which require routines:
-<wait>
-<k>/<key>
-<p>

Let's cover what they do:

<wait %d> - Waits the specified number of milliseconds.
<k> or <key> - Waits for input.
<p> - Scrolls to the next paragraph.

We need to specify at which point these routines start and have the Dialogue Bubble perform and finish them before printing the next character.

An example of the <k>, or <key>, routine would be something like this:

public void UpdateRoutine()
{
    if (Input.GetKeyDown(KeyPress) == true)
    {
        FinishRoutine();
    }
}

How do we specify when to start performing these? To start, I think we need to track the character index that they start at. For example, look at the following string:

"Hello<k>Friend!"

"Hello" starts at index 0 and ends at index 5. Afterwards, we encounter a <k> tag. We should start the input after "Hello," so I think it makes sense to use the EndIndex of the previous BubbleTextData. In this case, the key input would start at index 5.

However, look at the following:

"Hello<k><p>Friend!"

Barring the lack of new lines, this is how TTYD handles the vast majority of its dialogue bubbles. Since control codes are omitted from the final text, both the <k> and <p> would start at index 5. <k> would be found first, then <p> would be found. Since this is completely valid, we need to handle it. I think we should do it with the following data structure:

Dictionary<int, List<HtmlNode>> MessageRoutines

This should be added to BubbleData.

By adding the index as the key and the control code node into a list of HtmlNodes, we have all the information to do what the dialogue demands in the order specified. The information also includes any attributes that the control code has.

Implementing Message Routines
-----------------------------
Each frame, we should check if the MessageRoutines dictionary at CurTextIndex has any message routines. If so, pass the list into a new method that will handle instantiating classes with logic based on the nodes. Then, mark that we added routines; this will prevent us from always adding them and never progressing. Clear the mark flag next time text is progressed.

The instances of the classes should be put into a Queue. The one at the front of the Queue will update, and when done, be removed from the queue. Once the queue is empty, the Dialogue Bubble will proceed onto the next character.

The classes should be similar to other systems we already have, such as Battle Events:

-Create a base MessageRoutine class:

public abstract class MessageRoutine : IUpdateable, ICleanup
{
    protected DialogueBubble DBubble { get; private set; }= null;
    public bool Complete { get; protected set; }
 
    protected MessageRoutine(DialogueBubble bubble)
    {
        DBubble = bubble;
    }
    
    public virtual void CleanUp()
    {
    }
    
    public abstract void OnStart();
    public abstract void OnEnd();
    public abstract void Update();
}

Access to the DialogueBubble will allow MessageRoutines to do a lot more than if they don't have it.

-Create derived classes with their own logic.

We can even have the scrolling code be a MessageRoutine. This would allow us to simply make <p> add a scrolling routine, which will handle everything already.

Try this out and see how it works!

Update (4/21/18)
----------------
The Message Routine approach has been implemented and works great!

The next thing we can do is implement going back a paragraph. It would be as simple as this:

In the InputRoutine, check for input regarding going back a text box. If you can go back (if ParagraphIndex > 0), then add the following MessageRoutines:

1. A ScrollRoutine that goes up
2. An InputRoutine
3. A ScrollRoutine that goes down

The state of the routines would be preserved this way. This would also make it so you can stack them; if you wish to go back another paragraph, the same thing would apply.

Since we're using a Queue, we can't do this. Instead, we can use a Stack and add all the Message Routines in backwards. This will allow us the last one to go in to be updated.

Try this out and see how it works.