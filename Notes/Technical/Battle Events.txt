Battle Events (12/31/16)
------------------------
There needs to be a system that allows events in battles so it waits
for specific things to happen before starting the next character's turn.

Examples in the PM games:
-------------------------
-Hurt and death animations finishing
-Dialogue from characters during event battles
-Enemies running after using a Fright Jar/Fright Mask
-Status Effects taking effect at the start of the phase cycle, such as Burn and Frozen
-Status Effects completing at the start of the phase cycle (character jumps up with accompanying sound effect)
-Battle messages, such as ones for Burn ("Burned! The fire will steadily do damage!") or not being able to run away ("Can't flee this fight!")
-All Stage-related events and hitting items away from Audience members

Details/Thoughts
----------------
Some events happen after others.

Poison will take effect before Burn. While Poison happens before Burn in the current system, it doesn't have Poison take
effect on all entities and wait, then have Burn take effect on all entities and wait for it to finish.

Before delving into that, let's start simpler and on a global battle scale. Battle Messages are the simplest events.

Scratching the surface, this can be implemented using a queue. When a Battle Message is supposed to show up, add it to the queue
and wait for it to finish before moving onto the next event. When no more events exist, start the next character's turn.
However, this won't work for the Status Effects as described above.

We can likely use a Dictionary for this. Some more info:
-The keys would be integer values, with higher values meaning higher priorities and vice versa
-The values would be a List of BattleEvent objects
-We would track the highest priority in a separate field and update the list of BattleEvents corresponding to that priority first
-The highest priority value would be updated after each finished BattleEvent. If the list for that priority is finished,
it finds the next highest priority to update

Example:
--------
Dictionary<int, List<BattleEvent>> BattleEvents = new Dictionary<int, List<BattleEvent>>();
int CurHighestPriority;


public void AddBattleEvent(int priority, BattleEvent battleEvent)
{
	//Do stuff here
}

public void UpdateBattleEvents()
{
	//Update battle events
	//Remove event if done
	//If no more events for priority
	//Get next highest priority
}

Update (1/3/17)
---------------
Battle Events can only occur if the BattleState is TurnEnd. The only exception to this, that I can find so far, is taking damage and Battle Messages
in a specific case:
If the audience throws something at Mario or his Partner, it'll start a damage or Battle Message event if the item is negative or positive
respectively, bring down their menus when the event starts, then bring the menus back up when the event is done.
I'll have to double-check to see if there any other instances of events occurring at different times.

This wasn't specified previously, but if a higher priority Battle Event is added while the Battle Events are being performed, the current
priority finishes before moving on.

Furthermore, BattleEvents themselves may need to have their priorities defined. I'll start a first-pass implementation to see how the current
design works then modify it as needed, as doing that will constrain each Battle Event to a priority. Let's not allow priorities less than 0 to
keep things simple.

Update (1/5/17)
---------------
I found another exception. If you try to select a menu option that's not available, such as No Items, or Run Away when you can't,
the Battle Message shows up and interrupts the menu. The menu then goes back to how it was before the interruption.

We can make a way to suppress all BattleMenus so they don't show up or update. That alone would allow the
Battle Messages to preserve the menu, but we still need to have BattleEvents work when it's an entity's turn.

For now I think each BattleEvent should designate the BattleStates it takes effect on, and we'll have to update FindNextHighestBattleEventPriority()
to check the state as well.

This covers most cases, but I'm not sure if it covers or works for all yet.

To fully understand this system, I'll have to do even more research and testing.

Update (1/6/17)
---------------
To implement the above, I thought of having a new struct that accepts a BattleEvent, its Priority, and the BattleState it should take effect in.

We can have a List of this struct and look through it to add any pending BattleEvents whenever we change BattleState. If the BattleState matches,
add it to the Dictionary. A list isn't the most efficient thing, but I'm trying to get a feel for this system and get it working first.

Update: I implemented it like this and it looks good, but instead it should be an array of BattleStates, as some Battle Events can occur on both.
If the array is null or empty, don't add it at all since specifying the state it appears in is required.

If this works out well, the next step would be figuring out how to prevent multiple of the same BattleEvent from being added at once. For
example, if you put two enemies to sleep with a Sleepy Sheep, it'll queue up and add two Battle Messages with the same contents.

Update (1/13/17)
----------------
There needs to be an easy way to designate the Priority of Battle Events to make sure it's organized.

We can have an enum that designates the start of certain types of Battle Events. For instance:

public enum StartEventPriorities
{
	Stage = 0, Status = 500, Dialogue = 1000
}

So in this case, 0 to 500 should be reserved for Stage-specific Battle Events. For Status Effects, we can add their Status Priority values to
the Status value in this enum, allowing all of them to occur in the correct order.

Furthermore, BattleEvents should have a bool determining whether there can be multiple of it at the same Priority value or not. If only one is
allowed, when adding that event it'll look to see if a BattleEvent with the same priority exists and add it if not and not add it if so.

Update (1/14/17)
----------------
I decided to not deal with duplicates in this system because it doesn't make sense to call a method to add a Battle Event and it doesn't
add it for an arbitrary reason. For existing systems, there's always a clear reason something isn't added (Ex. TryAfflictStatus() implies
that the Status Effect has a chance at not being inflicted). Instead, it'll be up to the coder to ensure that a BattleEvent isn't added
more than once if it shouldn't be. However, the system itself won't prevent duplicates.




Specific Battle Event Information
---------------------------------
Here's information I found about specific Battle Events in TTYD.

-Doopliss' transformation actually ISN'T a move! It's just something he can do at the start of the enemy phase. This explains why he can still
move after transforming.

My steps to confirm this were as follows:
1. I got into the 2nd Shadow Sirens Battle
2. I got Doopliss down to under half HP at the end of the player phase
3. Doopliss transformed, THEN Beldam began her dialogue asking if he's doing okay and such
4. Doopliss attacked after Beldam's dialogue

-The above also means that mid-battle enemy dialogues happen at the start of the enemy PHASE, not each enemy's turn.
-First Strikes override any dialogue at the start of the battle. For example, if you get a First Strike on the 2nd Shadow Sirens battle,
which is done through hitting an enemy on the overworld with a battle modifier cheat, they won't say their dialogue at the start.

-The "Can't flee this fight" message occurs before Lucky Start kicks in

-Stage hazard events happen before the Battle Messages for Status Effects inflicted do.

-When an attack inflicts multiple Status Effects (via cheats), the last one inflicted's sound and splash effect is played, but all Battle Messages
still go in order of status priority.

-For the Status Effects ending events, they also occur in the same status priority. For example, if Mario and Ms. Mowz both are inflicted with Electrified
and Ms. Mowz is also inflicted with Burn, Ms. Mowz will play the BattleEvent to clear Burn, then both Mario and Ms. Mowz will play the event to clear Electrified.