Damage and Interaction Handling
-------------------------------

Goals
----- 
1. Be able to tell, in an interaction, which entities take damage, the type of elemental damage dealt, the total damage dealt, and
the final result (KO, Heal, etc) without actually applying anything yet.
2. Consolidate damage and interaction handling to the Interactions class so it's easily accessible.

Implementation
--------------
Modify and use the DamageHolder struct, which currently is unused. Rename it to InteractionHolder.

We need the following fields:

1. The entity taking damage
2. The total amount of damage the entity receives
3. The type of elemental damage the entity receives
4. The weakness type the entity suffered from the elemental damage
5. The resistance type the entity benefited from the elemental damage
6. The contact result
7. Whether the damage received pierced the entity's Defense
8. The Status Effects the entity should be inflicted with

private struct InteractionHolder
{
    public BattleEntity Entity;
    public int TotalDamage;
    public Element DamageElement;
    public WeaknessTypes WeaknessResult;
    public ResistanceTypes ResistanceResult;
    public ContactResult Result;
    public bool Piercing;
    public StatusEffect[] StatusesInflicted;
}

There should be a static method in Interactions with the following signature:

public static List<InteractionHolder> GetDamageInteraction(BattleEntity attacker, BattleEntity victim, Elements element, int damage, StatusEffect[] statuses);

Inside this method, we will consolidate what BattleAction.AttemptDamage() and BattleEntity.TakeDamage() do regarding determining results, with some alterations, allowing us to fill out the InteractionHolder's fields. The reason a List is returned is because both entities can be damaged in a PartialSuccess. Since entity-specific percentages for being affected by Status Effects aren't in yet, keep that field null for now.

All weaknesses and resistances will be accounted for.

Update (7/1/16)
---------------
The new system is in and working. GetDamageInteraction() returns an instance of a new InteractionResult class that holds the
Attacker and the Victim's InteractionHolders.

BattleEntity.TakeDamage() still does what it did before, except instead of calculating the element result it uses the one from
the InteractionHolder passed in.