Stylish Moves Implementation (2/8/18)
-------------------------------------
Stylish Moves in TTYD are simply additional inputs during certain parts of an action. Only one Stylish move is required to boost the Action Command Value of the Action Command. Performing multiple may relate to Audience growth, but that information is not known at the moment.

It's important to note that all Stylish Moves are performed in the Sequence, not the Action Command.

These are rules all Sequences with Stylish Moves in TTYD follow:

-Only one Stylish Move is active at a time
-Stylish Moves either interrupt the sequence or don't
-Some Stylish Moves can be performed only after a previous one is performed (Ex. Hammer)
-Stylish Moves are performed with only the A button
-Stylish Moves can be mistimed and won't execute if so

With these in mind, the first thing to tackle would be a way to define and handle Stylish Moves.

We know each Stylish Move involves the following:

1. A timing window to execute
2. A response when executed

In a Sequence, we can only start Stylish moves at each SequenceStep. Since some Stylish Moves may occur halfway through a step, we can say that the timing window is relative.

So, a Stylish Move structure might look like this:

public struct StylishData
{
    public float StartRange;
    public float EndRange;
}

At the start of a SequenceStep, you would define a StylishData with the StartRange, and EndRange. The StartRange would be relative to when it started, and the EndRange would be relative to the StartRange.

As an example, let's take Jump: after successfully performing the Action Command, in the Success branch we start a StylishData with StartRange = 400 and EndRange = 800. This means the success range of the Stylish Move will start after 400 milliseconds and end 400 milliseconds after it started.

We can keep track of the current Stylish Move in the Sequence and update it accordingly. When it's in range, we can even show the "!" graphic if the BattleEntity performing the Sequence has Timing Tutor equipped! 

If the player presses A within the range, the "STYLISH" VFX will play and the Stylish Move's effects will pan out. The effects can either do something as simple as play an animation or alter how the Sequence carries out. How do we handle this?

Each Sequence is different, so we should just provide a simple means for defining it.

Each Stylish Move can be associated with an index. Our structure now looks like this:

public struct StylishData
{
    public float StartRange;
    public float EndRange;
    public int Index;
}

When a Stylish Move is successfully performed, we can call a new method with the index passed in:

protected virtual void HandleStylishMove(int index);

This can be overridden in each Sequence to do what they want. If one Stylish Move is as simple as playing an animation, it would look like this:

protected override void HandleStylishMove(int index)
{
    switch (index)
    {
        case 0:
        User.AnimManager.PlayAnimation("Stylish");
        break;
    }
}

More complicated ones would require another branch that leads back into the main one. A good example to help visualize how this will work is Goombella's Multibonk Stylish Move.

After Goombella walks up and crouches to start her jump, if you do the Stylish Move, she does a little jump and spins in place, then continues like normal. To implement this in our system, we would do the following:

protected virtual void SequenceStylishBranch();

Stylish Moves are not required, so this doesn't need to be abstract.

In HandleStylishMove(), we would set the JumpBranch to the Stylish branch. In the Stylish branch, we would do Goombella's jump and spin over some time. Now we have to handle going back into the normal sequence, which will vary based on how the Sequence is implemented. To cover two general cases:

-If the walking part is in the Start branch and jumping part is in the Main branch, simply change to the Main branch
-If the walking part is in the Main branch, set the SequenceStep to the correct value after changing back to the Main

Ideally, it's recommended to make sure that Stylish moves requiring the Stylish branch occur when the branch would be changed anyway, like in the first instance described. Since each move is vastly different, this might not be possible, but keep in mind that it's much easier to read and debug this as well.

Let's test one more case to ensure this system works: Power Smash.

Whether the Action Command is successfully completed or not, Mario will wait for a bit with his Hammer swung out at the enemy. We can define the Stylish Move when he performs the swing, then if the player presses A, go to the Stylish branch and do the flip. When we start the flip, we can start another Stylish Move for the second flip. When the player performs the second Stylish Move...there's only one Stylish branch, so it will do the first flip again.

Therefore, we need the Stylish Move's index to be in the Sequence itself. This way, you can define a Sequence for each Stylish Move in the Stylish branch as you see fit. With this, the Stylish branch for Power Smash can check for the index and perform the correct Sequence.

With this system, we should be able to do everything that TTYD supports. Test it out and note anything that needs work.