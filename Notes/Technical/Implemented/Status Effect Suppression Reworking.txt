Status Effect Suppression Reworking (9/11/17)
---------------------------------------------
The current implementation of suppressing Status Effects causes all statuses to both have their turn counts and effects not affect the entity.
Furthermore, the helper methods are only for suppressing Status Effects with certain alignments.

Since working on this system, I've learned that in the Paper Mario games there is, far more often than not, an exception to some rule, and many
rules are handled on a case-by-case basis, so the current approach fails both in accuracy and robustness.

I did some more testing with Stone suppressing Status Effects in PM, and I made the following observations:

"Effect Suppress" means that they don't take effect and/or lose a current lasting effect.
"Turn Suppress" means that they keep any lasting effects but their turn counts don't increment.

Some statuses are suppressed in both ways.

Effect Suppressed
-Electrified (loses icon and Mario doesn't have static electricity around him any longer)
-Poison (Color remains, but no damage each turn)

Turn Suppressed
-Electrified
-Poison
-Invisible
-Tiny


Based on how some of these statuses work when suppressed, we need the ability for any or all of the following to happen while being able to
keep the Status Effect on the BattleEntity:

-A way to turn off the status icon from displaying
-A way to turn off visual effects for the status (Ex. static electricity from Electrified)
-A way to turn off the status' effects (Ex. Poison not dealing damage)
-A way to stop the status' turn count from incrementing each phase cycle

Currently, the Stone status is the only thing I have found in both Paper Mario games that suppresses Status Effect turn counts.
Veil suppresses damage from Burn, Poison, and Frozen, but turn counts still progress.

The next focus is how to determine what happens to a status when it gets suppressed. For example, how would we tell Poison
to only suppress its effects when it's suppressed by Veil and how would we tell it to suppress both effects and turn count
when suppressed by Stone? What if Mario is inflicted with Stone already and Veil is used on him?

Implementation
--------------
1. For handling Confusion with Veil, we can add a bool parameter to StartAction() in BattleEntity. The resulting signature would be like this:

public void StartAction(MoveAction action, bool ignoreConfusion, params BattleEntity[] targets);

This would enable us to always ignore Confusion when performing forced actions such as the second part of Veil or Outta Sight and when ignoring the hidden/invisible entity's turn.

2. For handling suppressing, we should have the types of suppression in an enum as follows:

public enum StatusSuppressionTypes
{
    TurnCount,
    Effects,
    VFX,
    Icon
}

We'll have two new methods in EntityProperties with the following signatures:

* public void SuppressStatuses(StatusSuppressionTypes, params StatusTypes[]);
* public void UnsuppressStatuses(StatusSuppressionTypes, params StatusTypes[]);

These should be stored in a Dictionary for each StatusEffect as follows:

* Dictionary<StatusSuppressionTypes, int> SuppressionStates;

The reason for a Dictionary as opposed to a bit field or another data type is there can be many sources of suppression. Look at the following example:

-Say Mario is inflicted with Poison for 5 turns. On his next turn, he uses a Stone Cap which causes an Effects and TurnCount suppression on Poison. Say Stone lasts for 5 turns.
Vivian then uses Veil on Mario, which causes an Effects suppression on Poison. When Vivian comes back up, Mario is still inflicted with Stone and Poison, but coming back up
removes the Effects suppression on Poison. Now Mario is still inflicted with Stone but can still take damage from Poison.

The Dictionary prevents this by adding and removing a value of 1 when the Status Effect is suppressed and unsuppressed, respectively. If a Dictionary was used in the example
instead, Mario would still have Effects suppression applied to Poison after coming back up from Veil.

2a. The base StatusEffect will have the following new methods:

* public void Suppress(StatusSuppressionTypes);
* public void Unsuppress(StatusSuppressionTypes);

Derived StatusEffects will have the following overrideable methods.

* protected abstract void OnSuppress(StatusSuppressionTypes); - Called when suppressed by this StatusSuppressionType if no suppressions from this type exist
* protected abstract void OnUnsuppress(StatusSuppressionTypes); - Called when no more suppressions of this StatusSuppressionType remain

The goal of the following methods is to allow us to call these in wrapper methods defined in the base class.
This way, we call the wrapper method and if the Status Effect is suppressed in that way it won't call the overridden method, allowing suppression
to act uniform for all Status Effects.

* protected void ProgressTurnCount(); - Wrapper of IncrementTurns(). Won't call IncrementTurns() if TurnCount suppressed

The old suspended methods, fields, and properties will be removed:

* public bool Suspended { get; set; }
* private bool IsSuspended;
* protected abstract void OnSuspend();
* protected abstract void OnResume();

Each Status Effect should handle when its effects or VFX are applied by individually checking for suppression of the appropriate type.
This is what I feel is the best approach, as the Status Effects are all so different.

3. When something suppresses Status Effects, I feel the most flexible approach is to just have that thing specify which Status Effects get suppressed and how.

For example, Stone would do something like the following when being inflicted:

EntityAfflicted.EntityProperties.SuppressStatuses(StatusSuppressionTypes.TurnCount, StatusTypes.Electrified, StatusTypes.Poison, StatusType.Invisible, StatusTypes.Tiny);
EntityAfflicted.EntityProperties.SuppressStatuses(StatusSuppressionTypes.Effects, StatusTypes.Electrified, StatusTypes.Poison);
EntityAfflicted.EntityProperties.SuppressStatuses(StatusSuppressionTypes.VFX, StatusTypes.Electrified);
EntityAfflicted.EntityProperties.SuppressStatuses(StatusSuppressionTypes.Icon, StatusTypes.Electrified);

Update (9/17/17)
----------------
This has been implemented and works as intended.