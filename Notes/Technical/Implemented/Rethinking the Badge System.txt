Rethinking the Badge System (3/23/18)
-------------------------------------
We have a few issues with the current Badge system. The main issue is with the method int GetEquippedBadgeCount(BadgeTypes) on BattleEntity.

To recap, we have three types of Badge AffectedTypes:

-Self, Partner, Both

Self tends to refer to Mario or an Enemy, Partner refers to a Partner, and Both refers to both Mario and his Partner.

Badges in the PM games are stored in a single list. When you equip a Badge, some effect is applied. In the current state of our Battle System, this is what we have. Equipping a Badge to Mario or his Partner puts the Badge in the Active Badge list. On top of that, we have a Dictionary that contains the number of each BadgeType equipped.

This system essentially acts as a list of Badges the PLAYER has equipped. If we are to check whether Mario has Close Call P equipped when only his Partner does, it would say he has it on. However, this system works perfectly fine for Both Badges, such as Quick Change and Simplifier, as a single instance affects all Player characters.

That leaves us with determining a reliable way to tell if a Badge is equipped to that particular BattleEntity. It shouldn't say Close Call P is equipped to Mario if his Partner has it. In the same manner, equipping Right On! to a Partner should say the Partner has it and Mario doesn't. This same concept should apply to all BattleEntities. In the case of Both Badges, the Badge may not be equipped to that specific BattleEntity, but it will still benefit from its effects.

In simple terms, GetEquippedBadgeCount() should return nothing more than the number of that BadgeType equipped to that specific BattleEntity.
                                                                         -------------------------------------------------------------------

Implementation
--------------
We can add a List<Badge> EquippedBadges to each BattleEntity's EntityProperties with associated add/remove methods. When equipping a Badge, add it to this list, and when removing, remove from this list. GetEquippedBadgeCount() would simply count the number of Badges of that BadgeType in this list and return it. To improve this performance, we can also add a Dictionary that counts how many of a particular BadgeType is equipped to this BattleEntity, so fetching nears O(1) time.

This would leave the concept of equipped Badges separate from the inventory. Badge.Equip() shouldn't care about the type of BattleEntity it is equipped to, so handling equipping Badges to each BattleEntity would be done outside the battle itself, preferably at the start. Unit tests involving Badges would also be more reliable.

Now we need a way to handle shared effects. One idea is to allow Badges to be equipped to multiple BattleEntities. Badges would still add properties and be applied to single BattleEntities, so the only real change required would be method signatures and using a List of BattleEntities instead of a single reference.

For example, when equipping Quick Change, it would be equipped to both Mario and his Partner. They both would have some AdditionalProperty that says they can swap Partners without using up a turn. The switching Partner code wouldn't even need to be changed - unequipping the Badge on the old Partner and putting it on the new one would still transfer the effect. GetEquippedBadgeCount() would also say that Quick Change is equipped to both Mario and his Partner - this is what we want!

This implementation would require the following changes:

public List<BattleEntity> EntitiesEquipped { get; private set; } = new List<BattleEntity>();

public void UnEquip(BattleEntity entity) - Unequips this Badge from one particular BattleEntity.
public void UnEquipAll() - Unequips this Badge from all BattleEntities

Update (3/24/18)
----------------
When implementing this, I ran into hurdles with Badges that rely on certain events, such as Close Call and how it relies on the HealthStateChangedEvent. There's no way to check for which BattleEntity was affected, and adding that in would simply be messy.

Instead of Badges being able to be equipped to multiple BattleEntities, I think it's best to revert to the previous way but still keep the Badges decoupled from the Inventory.

Most party-related (Player, Enemy, etc.) effects, such as Quick Change, know that they affect the party already. In that case, why not simply check if anyone in the party has a certain Badge equipped or a certain AdditionalProperty?

This would:

1. Reduce the amount of refactoring and newly introduced complexity (Ex. multiple BattleEntities per Badge)
2. Allow keeping the existing system's strengths
3. Allow checking for shared effects

We can add extension methods to easily check for these when we need.

This seems like what we actually want. Test it out and see how it works.

Update (3/26/18)
----------------
This has been implemented and works very well!