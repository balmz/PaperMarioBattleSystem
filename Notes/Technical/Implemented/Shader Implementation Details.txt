Shader Implementation Details (1/18/18)
---------------------------------------
This will go over the individual shaders and the ideas behind their implementations.

Charge
======
The Charge shader is intended to mimic the one present in TTYD. A 4x64 rainbow texture, ripped directly from TTYD, is used in this shader.

High-level Overview
-------------------
A rainbow texture is laid over the object, which has its alpha changed over time so the texture part fades in and out. The offset by which to sample the texture is also adjusted over time, so it appears that the rainbow texture is moving. These timers are global, so all objects rendered with the shader will have the same alpha value for the rainbow effect at all times.

Detailed
--------
We have several variables:

sampler s0; - The sampler for the rendered object. It's automatically loaded into the shader

Texture2D chargeTex; - A 4x64 rainbow texture, ripped directly from TTYD
sampler chargeSampler = sampler_state { Texture = <chargeTex>; AddressU = Wrap; AddressV = Wrap; }; - Sampler for sampling chargeTex

float chargeAlpha; - The alpha of the Charge texture

float2 chargeOffset; - The offset to sample the Charge texture from
float chargeTexRatio; - The ratio between the Charge texture and the object's full texture (Ex. spritesheet)
                        This is essentially: new Vector2(tex.Width, tex.Height) / new Vector2(spriteSheet.Width, spriteSheet.Height);
                        
float2 objFrameOffset; - The texture coordinates of the frame the object is rendering in the spritesheet
                        
Our steps are as follows:                        

1. Start by sampling the color of the pixel from the object's texture at the input coordinates (s0)

2. Offset the rendered object's current frame from the top of the spritesheet so the charge effect is consistent for each frame rendered. This involves subtracting the texture coordinates from objFrameOffset. The UVs of the Charge texture are set to Wrap in the sampler, so negative values are valid.

The result is that no matter which frame is displayed, the colors sampled from the Charge texture are always the same for a frame at the top of the spritesheet and one at the bottom. This fixes the jumpiness in colors when changing frames.

3. Fetch the corresponding coordinates scaled with the Charge texture. We only care about the Y, since the X values in the Charge texture are the same, so the coordinate ends up being input.TextureCoordinates.y / chargeTexRatio. This ensures that every time we reach the height of the Charge texture (Ex. 128 in obj texture when Charge tex has height of 64), we start back from the beginning of the Charge texture.

4. Sample the color of the pixel at the coordinates on the Charge texture. this is simply the coordinates we found in step 2 + chargeOffset. This wraps around the texture since the UVs are set to wrap.

5A. If the object texture's color doesn't have an alpha value, simply return the same color. We don't want to modify transparent pixels.

5B. If it does have an alpha value, we now need to use both colors to get the final color. Multiply the Charge texture color we sampled with (chargeAlpha * input.Color.a). This gets us a color scaled with both the Charge alpha and the object's own alpha, which was passed through the SpriteBatch.

  5B1. Finally, return the base color times the object's color added to the color we calculated. (color * input.Color) takes into account the object's tint, and we simply add the Charge color onto that to get the final result.
  
Sleep
=====
The Sleep shader mimics the 'Z's that show up near a character afflicted with Sleep in TTYD.

High-level Overview
-------------------
The 'Z's move back and forth in a wavy motion. To do this, pixels in the 'Z' sample pixels ahead or behind in the X based on their Y value. This causes it to do the wavy motion.

Detailed
--------
Variables:

sampler s0; - The sampler for the rendered object. It's automatically loaded into the shader
float2 textureSize; - The size of the texture

float shiftTime; - The time used when shifting the 'Z'. This is set to RenderingGlobals.SleepShaderShiftOffset, which is the current active game time divided by -184. The negative value causes it to move in the direction TTYD's does

float intensity; - The intensity of the shift. This is scaled by the Y texcoord sampled and used to calculate the final shift
float moveAmtX; - The max amount of pixels in the X to sample from. After the shift is calculated, it's scaled by this value 

Steps:

1. Calculate the texel size with textureSize, which is simply (1 / textureSize.x) and (1 / textureSize.y)

2. Calculate the shift, which is the cos of shiftTime added to (the current Y texcoord scaled by the intensity), then multiplied by moveAmtX

3. Sample the color of the pixel at the texcoord + (the X texel size multiplied by the shift)

4. Return the color multiplied by input.Color, which is the current color of the object passed through the SpriteBatch