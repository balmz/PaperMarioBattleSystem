Shelled and Winged Enemy Implementation (3/19/17)
-------------------------------------------------
Specific Physical Attributes on enemies in the first two PM games have unique properties.

Overview
--------
Shelled enemies like Koopa Troopas and Buzzy Beetles can be flipped on their backs if hit with a move that attacks from above,
such as Jump or Sky Dive. After a few turns, these enemies will get back up. If already flipped, these moves will refresh the turn count for
them getting back up.

Enemies like Clefts and Bristles can also be flipped, but that only occurs when they're hit with anything that deals Explosive damage,
not with a particular type of contact. They act the same; the only difference is the condition to flip them.

Additionally, Winged enemies like Paragoombas and Parakoopas fall to the ground when attacked from above and take on the appearance and
information (tattle, stats, etc.) of their grounded versions, Goombas and Koopas respectively. All moves in the PM games that flip a Shelled
enemy also remove a Winged enemy's wings, but they are inherently separate. Stilt Guys act exactly the same as any Winged enemy, with their
grounded versions being Shy Guys.

However, Kammy Koopa in TTYD is a bit different in that her tattle, name and other information is exactly the same. Furthermore, she gets back
on her broom, becoming airborne again, after a few turns of being grounded.

Needs
-----
So what we need is the following:

1. A way to tell a BattleEntity to flip over when hit with a specific ContactType or Element.
2. A way to have the BattleEntity unflip after a designated turn count.
3. A way to tell a BattleEntity to lose its wings when hit with a specific ContactType.
4. A way to tell a Winged BattleEntity which information to use when Grounded. For Kammy Koopa, we can just use the same information.
5. A way to have the BattleEntity go back to flying after a designated turn count. This applies to Kammy Koopa.
6. A way to tell a BattleEntity to lose a segment.


Update (3/20/17)
----------------
There are a few corrections to make.

To start, we already have a DamageEffects enum that looks like this:

public enum DamageEffects
{
    None = 0,
    FlipsShelled = 1 << 0,
    RemovesWings = 1 << 1,
    RemovesSegment = 1 << 2,
	FlipsClefts = 1 << 3,
    SpinsOut = 1 << 4
}

This is in the damage information of each move. For example, Jump specifies that it FlipsShelled and RemovesWings.
This removes some of our Needs.

Now the question is: How do we tell a BattleEntity to react based off the Damage Effect it's hit with?

To start, we need an interface for each type. We can define the following interfaces:

-IFlippableEntity
-IWingedEntity
-ISegmentEntity
-ISpinnableEntity

They will each have their own properties and methods. Let's outline them below.

IFlippableEntity
----------------
-bool for whether it's flipped or not
-int for how long it stays flipped
-int for how long it's been flipped
-DamageEffects enum value for the flip conditions, or in other words which DamageEffects flip it
-int for how much its Defense goes down when flipped
-Handler for the flip; what happens when flipped, like the animation to play, Defense reduction, and such

IWingedEntity
-------------
-bool for whether it's winged or not
-int for how long it stays grounded when grounded (only used by Kammy Koopa)
-int for how long it's been grounded (only used by Kammy Koopa)
-Information to use when grounded; which entity to essentially become
-Handler for removing its wings; which animations to remove them from and any VFX that need to show
-Handler for being grounded; what happens when grounded, like the animation to play and such

ISegmentEntity
--------------
-int for how many total segments there are
-int for how many segments there currently are
-Handler for when a segment is removed
-Handler for when a segment is added (I don't think this ever happens in the PM games, but it would be nice to have)

ISpinnableEntity
----------------
-int for how many times the entity has been spun
-Handler for when the entity is spun


We check for these DamageEffects in the damage calculation and try to cast the BattleEntity as that type. If that cast is valid
then we can add that DamageEffect to the results so we know what happened. For example, say the victim is a Cleft, an IFlippableEntity.
If the Cleft was hit with a FlipsShelled or FlipsClefts DamageEffect, we'd then cast and check to see if it gets flipped by either of those effects.
If it gets flipped by FlipsClefts, then we add that DamageEffect to the Victim's InteractionHolder so when it's returned it says that
it got flipped.

The actual handling for each thing may have to occur in each entity's overridden TakeDamage method.

I'll get a feel for how this all comes together. I'm hoping to find a better way of doing this than casting.

Update 2 (3/20/17)
------------------
I had to make a few adjustments and will propose a couple ideas for improving this.

Guarding or Superguarding an attack can prevent DamageEffects from occurring in the PM games. Most notably, if Koops Guards or Superguards
an attack from a Goomba, he won't get flipped. Therefore, I had to change the DefensiveActionHolder to include a filtered DamageEffect enum value.
I also made DefensiveActions support this, and it works fine.

Now onto the ideas. At the moment it's very tedious and not scalable to have to write a bunch of "if" conditionals for each DamageEffect.

Idea 1 - Dictionary
-------------------
1. Define a dictionary where each DamageEffects correlates to a type (Ex. FlipsShelled = Key, IFlippableEntity = Value)
2. Then it goes through all the DamageEffects enum values and looks up the type in the Dictionary and tries an 'as' cast
3. If the cast fails, unset that DamageEffect value

The advantage is this makes it easy to look for the correct thing. The downside is as we add more DamageEffects, it'll add more casts which can
significantly impact performance.

Idea 2 - Entity-defined DamageEffects
-------------------------------------
1. Have a DamageEffects enum value in each BattleEntity's EntityProperties. This value would tell which DamageEffects the entity is affected by
2. When determining the DamageEffects that go through, check the move's DamageEffects, and if it's there, check the entity's. If the entity
has that DamageEffect, then keep it in and assume that the entity is affected by it. This lets us know the entity is affected by DamageEffects
without having to cast
3. When doing all the logic to handle the DamageEffects, perform the casts explicitly. An InvalidCastException tells us that an entity was
wrongly marked as being affected by a DamageEffect but not implementing any behavior regarding it.

We might still need to use a Dictionary to define the DamageEffects and their types for handling. We'll get to that once this is done.

I think Idea 2 is preferable for both readability and performance.

Update (3/27/17)
----------------
The implementation has been working well and is currently implemented for Kooper. No casting has been required so far, as all the logic
is implemented in the entity's class.

However, I'm currently implementing a Paragoomba as a Winged entity, and I think the best way to handle rendering the wings is have a
separate ObjAnimManager for them. In the PM games, the wings are rendered behind the enemy and are not part of the same sprite, as the wings
are stored as separate textures and fall off when being removed.

We can have an event in ObjAnimManager that fires when changing animations. We can subscribe to that event and play the same animation, but
for the wings. This would keep the wings in sync with the enemy.

Also another note: When flipped, Koopa Troopas, Clefts, and other flippable enemies are immune to fright since they can't run away!
Implement this by adding immunities.

Update 2 (3/27/17)
------------------
It looks like it's better to handle the wings by allowing child animation frames. Considering the wings themselves are just animation frames,
this should work.

-Add a Frame[] ChildFrames field in the base Animation class
-Add an SetChildFrames(params Frame[]) method
-Add AddAnimationChildFrames(string, params Frame[]) to ObjAnimManager, which calls SetChildFrames on the animation if it was found
-Draw child frames in Animation

-Add a Vector2 offset to each animation frame which can be specified in another constructor
-Add a float depth offset to each animation frame which can be specified in another constructor

It may be tricky to get the wings to stay in place and disappear when the entity transitions to grounded with this system, but we'll
see how it works for now.

Update (3/30/17)
----------------
I think I know how to get the wings to stay in place. We'll remove the child animations when the wings should be removed, then have
a BattleEvent for winged entities falling. This will show the entity being grounded and show the wings disappearing. If the entity is dead,
then don't do this and let the death animation play instead.

However, for this to work correctly we need the targeting system in place, which means telling an entity that it's being attacked so it doesn't
do things it should until it stops being targeted.

Update (4/3/17)
---------------
I added the targeting system as well as a BattleVFXManager that handles any sort of VFX that needs to show.

Along with that, I added VFX for wings disappearing. I also added a new RemoveWings() method in IWingedEntity that is called through
a new RemoveWingsBattleEvent with the same priority as the one that causes them to fall down. I took the TTYD approach and made
Winged entities fall regardless if they died from the attack or not since it made handling everything much easier.

Winged entities can now fall and show their wings disappearing quite easily. We'll see later how this works for other, more complex enemies like
Kammy Koopa.

Update (4/9/17) - Segmented Entities
------------------------------------
Now onto segmented enemies like Pokeys. Pokeys have multiple segments that determine their height and what moves they can do. These can be handled
in the individual entity classes. However, Pokey segments appear to be different child objects. We currently have support for only one set
of child animations, but the segments seem to be more than just visuals.

The bottom-most segment acts as the pivot of the Pokey and determines how it rotates for its animations. Segments can also be used as an attack
and thrown at Mario or his Partner. In TTYD, if a segment is Superguarded, it gets reflected back at the Pokey, dealing the same damage of the
attack back at it. Segments can be removed from the top via attack or the bottom via an attack with a RemovesSegment property.

It may be worth looking into making segments a different type of BattleEntity, namely a supporting one. Segmented entities will have a list of these
and handle them as they see fit.