Improving Shelled and Winged Entities (1/27/18)
-----------------------------------------------
The title references Shelled and Winged BattleEntities, but this document will actually cover all of these types, including segmented ones like Pokeys.

Right now the implementation is a big pain. To implement shelled behavior, you have to directly put code into each derived BattleEntity class. Since there are quite a few
shelled BattleEntities, this code is often duplicated. It's not a scalable solution and isn't modular.

We need something better that can be reused among BattleEntities. This will also make it more extensible.

To start, what do we need these behaviors to do? Let's recap what each one does.

Shelled
-------
-When hit with a DamageEffect that flips, flips the entity for X turns
-When flipped, Defense drops by a certain value, usually the base Defense
-While flipped, the only action *MOST* can do is try to get up on their turn. Shady Koopas in TTYD can do a powerful move when flipped.

Winged
------
-When hit with a DamageEffect that removes wings, causes the entity to lose its wings
-When its wings are lost, it turns into the grounded version of that entity and is no longer in the air
-*MOST* winged entities never go airborne again. Kammy Koopa in TTYD is the only exception, though she's the same entity as her ground counterpart

Segmented
---------
-When hit with a DamageEffect that removes segments, causes the entity to lose a segment
-The last segment cannot be lost
-Entities can react differently to losing segments. Shy Stacks act the same but decrease their attack. Pokeys act the same until their last segment, in which they can only do one move


So we need behavior that is independent of the entities themselves. This needs to check when a BattleEntity gets hit, handles its turns, and etc.

We can add write one for each behavior. For example, Koopa Troopas, Koopatrols will have the same one that they can use. Shady Koopas will have one that's slightly different.

Paratroopas and Parabuzzies will require a different one, as they aren't knocked down immediately on hit. It can combine the winged and shelled ones.

We can make Winged entities that change to their grounded versions actually be replaced by them, since the entity system is more robust. Make sure to transfer statuses and everything else. A helper method can ease this.

We can give this a go and see how it works. It should all be automatic.

Update (1/27/18)
----------------
I tried it out and it works very well! I decided against making it automatic. In its current form, it handles setting the values (Ex. flipped) and whatnot, while the BattleEntity can choose how to react to it. For example, Koopa Troopas check the behavior to see if they're flipped and do nothing if so. Shady Koopas can use the same behavior but instead use the more powerful move if flipped.

This might need some tidying up since it's building off of the old code. Ideally, I'd like to actually replace the winged entities, such as Paragoombas and Paratroopas, with their grounded counterparts and copy everything over. Since that will cause complications during a turn, such as Mario using Power Bounce, we can do it if the BattleEntity isn't dead when we make them lose their wings.

Update (1/28/18)
----------------
Right now it doesn't seem worth it to actually replace the entities. Even in the PM battle scripts, they simply set information. Aside from status properties, the only information that remains the same for the winged entities is their Tattle data. If they derive from their grounded entities, then we can use those descriptions. It might be best to initialize the Tattle data in the constructors or somewhere else accessible so it can be easily changed in the event the BattleEntity isn't derived from its grounded version.

Try what seems best, and make sure to set the status properties as well.

Update (1/28/18)
----------------
This has been done, but I decided to let the entities themselves handle the Tattle data since they better know who their grounded version is.

I also experimented with changing it to the actual entity, and it was partially successful. A Paragoomba was replaced with a Goomba.

However, the main problem was that the entity can have too many different states that need to be copied. For example, Status Effects and the Flipped state of a Koopa Troopa. So since each entity is unique, there's only so much that we can do with a base reference in the behavior classes. As a result, I think it's best to keep the entity looking and acting just like its ground counterpart; it's not like the players will notice - exactly as it is in the PM games.
